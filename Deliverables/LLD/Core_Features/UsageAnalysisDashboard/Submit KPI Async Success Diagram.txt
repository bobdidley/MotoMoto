title Usage Analysis Dashboard Submit KPI Async Success


activate Client
Client -> Front End: Any User Interaction
activate Front End

Front End -> SubmitKPIAPI (Web Services): Axios.post(url : "/SubmitKPIAnalytic/Submit<AnalyticName>" : String, params : { KPI Metric } : JSON) : HTTP Request : IResponseModel
activate SubmitKPIAPI (Web Services)

note left of SubmitKPIAPI (Web Services): **NOTE**: FetchKPIAPI represents Fetch Bar Chart and Fetch Trend Chart,\nit is simpler to have both under one name because the operations are similar

//SubmitKPIAPI (Web Services) -> SubmitKPIAPI (Web Services) //IsAuthenticatedAsync(User info)  Boolean

//SubmitKPIAPI (Web Services) -> SubmitKPIAPI (Web Services) //IsAuthorizedAsync(User info)  Boolean
//note right of SubmitKPIAPI (Web Services): **NOTE**: User must be an authorized Admin
//note right of SubmitKPIAPI (Web Services): **NOTE**: Handled internally by Authentication\nand Authorization features

SubmitKPIAPI (Web Services) -> IAnalyticModel: IAnalyticModel analyticModel = new AnalyticModel()
activate IAnalyticModel
IAnalyticModel -> IAnalyticModel: AnalyticModel()
note right of IAnalyticModel: **NOTE**: Can be different model for each analytic
SubmitKPIAPI (Web Services) <-- IAnalyticModel: return AnalyticModel
deactivate IAnalyticModel


SubmitKPIAPI (Web Services)-> IAnalyticManager (Business Layer): IAnalyticManager analyticManager = new AnalyticManager()
activate IAnalyticManager (Business Layer)

IAnalyticManager (Business Layer) -> IAnalyticManager (Business Layer): AnalyticManager()

SubmitKPIAPI (Web Services) <-- IAnalyticManager (Business Layer): return AnalyticManager

SubmitKPIAPI (Web Services)-> IAnalyticManager (Business Layer): analyticManager.IsAnalyticRequestValidAsync(IAnalyticModel analyticModel) : IResponseModel

IAnalyticManager (Business Layer) -> IAnalyticManager (Business Layer): ProcessRequestAsync() : IResponseModel

IAnalyticManager (Business Layer) -> IAnalyticService (Service Layer): IAnalyticService analyticService = new FetchAnalyticService()
activate IAnalyticService (Service Layer)

IAnalyticService (Service Layer) -> IAnalyticService (Service Layer): FetchAnalyticService()

IAnalyticManager (Business Layer) <-- IAnalyticService (Service Layer): return AnalyticService

IAnalyticManager (Business Layer) -> IAnalyticService (Service Layer): analyticService.PutAnalyticAsync(IAnalyticModel analyticModel) : IAnalyticEntity

note right of IAnalyticManager (Business Layer): **NOTE**: There may be multiple methods of PutAnalyticService because\neach analytic will modify different attributes so the DAL will be similar

IAnalyticService (Service Layer) -> IAnalyticDataAccess (Data Access Layer): IAnalyticDataAccess analyticDataAccess = new AnalyticDataAccess()
activate IAnalyticDataAccess (Data Access Layer)

IAnalyticDataAccess (Data Access Layer) ->IAnalyticDataAccess (Data Access Layer): AnalyticDataAccess()

IAnalyticService (Service Layer) <-- IAnalyticDataAccess (Data Access Layer): return AnalyticDataAccess

IAnalyticService (Service Layer) -> IAnalyticDataAccess (Data Access Layer): analyticDataAccess.PutAnalyticAsync(IAnalyticModel analyticModel) : IAnalyticEntity

IAnalyticDataAccess (Data Access Layer) ->IAnalyticDataAccess (Data Access Layer): PutAnalytic() : IAnalyticEntity

IAnalyticDataAccess (Data Access Layer) -> Analytic Table (MariaDB / Data Store):  INSERT INTO <Analytic Table Name> <Relevant Data Column Names> VALUES\n   WHERE <KPI Specific Condition>;
activate Analytic Table (MariaDB / Data Store)

note right of IAnalyticDataAccess (Data Access Layer): **NOTE**: There are 6 KPIs and it may be easier to use\nStored Procedures for each KPI


// Responding back to the Front End starts


IAnalyticDataAccess (Data Access Layer) <-- Analytic Table (MariaDB / Data Store): return raw data
deactivate Analytic Table (MariaDB / Data Store)

//IAnalyticDataAccess (Data Access Layer) ->IAnalyticDataAccess //(Data Access Layer) RefineDataAsync()  IAnalyticEntity

IAnalyticService (Service Layer) <-- IAnalyticDataAccess (Data Access Layer): return IAnalyticEntity

deactivate IAnalyticDataAccess (Data Access Layer)

IAnalyticService (Service Layer) -> IResponseModel: IResponseModel response = new AnalyticResponseModel()
activate IResponseModel
IResponseModel -> IResponseModel: AnalyticResponseModel()
IAnalyticService (Service Layer) <-- IResponseModel: return AnalyticResponseModel
deactivate IResponseModel
note left of IResponseModel: **NOTE**: The Response model here will contain\nIAnalyticEntity and any supporting info for the Front End.


IAnalyticManager (Business Layer) <-- IAnalyticService (Service Layer): return IResponseModel
deactivate IAnalyticService (Service Layer)

IAnalyticManager (Business Layer) -> IAnalyticManager (Business Layer): IsResponseValidAsync(IResponseModel response) : Boolean

SubmitKPIAPI (Web Services) <-- IAnalyticManager (Business Layer): return IResponseModel
deactivate IAnalyticManager (Business Layer)

Front End <-- SubmitKPIAPI (Web Services): return IResponseModel
deactivate SubmitKPIAPI (Web Services)


Client <-- Front End: Proceed with application
deactivate Front End
deactivate Client
