title Usage Analysis Dashboard Fetch KPI Success


activate Client
Client -> Front End: Admin Enters Usage Analysis Dashboard
activate Front End

Front End -> FetchKPIAPI (Web Services): Axios.get(url : "/FetchBarGraph/<AnalyticName>" : String) : HTTP Request : IResponseModel
activate FetchKPIAPI (Web Services)

note left of FetchKPIAPI (Web Services): **NOTE**: FetchKPIAPI represents Fetch Bar Chart and Fetch Trend Chart,\nit is simpler to have both under one name because the operations are similar

FetchKPIAPI (Web Services) -> FetchKPIAPI (Web Services): IsAuthenticated(User info) : Boolean

FetchKPIAPI (Web Services) -> FetchKPIAPI (Web Services): IsAuthorized(User info) : Boolean
note right of FetchKPIAPI (Web Services): **NOTE**: User must be an authorized Admin
note right of FetchKPIAPI (Web Services): **NOTE**: Handled internally by Authentication\nand Authorization features

FetchKPIAPI (Web Services) -> IAnalyticModel: IAnalyticModel analyticModel = new AnalyticModel()
activate IAnalyticModel
IAnalyticModel -> IAnalyticModel: AnalyticModel()
note right of IAnalyticModel: **NOTE**: Can be different model for each analytic
FetchKPIAPI (Web Services) <-- IAnalyticModel: return AnalyticModel
deactivate IAnalyticModel


FetchKPIAPI (Web Services)-> IAnalyticManager (Business Layer): IAnalyticManager analyticManager = new AnalyticManager()
activate IAnalyticManager (Business Layer)

IAnalyticManager (Business Layer) -> IAnalyticManager (Business Layer): AnalyticManager()

FetchKPIAPI (Web Services) <-- IAnalyticManager (Business Layer): return AnalyticManager

FetchKPIAPI (Web Services)-> IAnalyticManager (Business Layer): analyticManager.IsAnalyticRequestValid(IAnalyticModel analyticModel) : IResponseModel

IAnalyticManager (Business Layer) -> IAnalyticManager (Business Layer): ProcessRequest() : IResponseModel

IAnalyticManager (Business Layer) -> IAnalyticService (Service Layer): IAnalyticService analyticService = new FetchAnalyticService()
activate IAnalyticService (Service Layer)

IAnalyticService (Service Layer) -> IAnalyticService (Service Layer): FetchAnalyticService()

IAnalyticManager (Business Layer) <-- IAnalyticService (Service Layer): return AnalyticService

IAnalyticManager (Business Layer) -> IAnalyticService (Service Layer): analyticService.FetchTrendChartAnalytic(IAnalyticModel analyticModel) : IAnalyticEntity

IAnalyticManager (Business Layer) -> IAnalyticService (Service Layer): analyticService.FetchBarChartAnalytic(IAnalyticModel analyticModel) : IAnalyticEntity
note right of IAnalyticManager (Business Layer): **NOTE**: The distinction between these are important in determining\nwhat kind of data is being returned, or create two service files, one for each

IAnalyticService (Service Layer) -> IAnalyticDataAccess (Data Access Layer): IAnalyticDataAccess analyticDataAccess = new AnalyticDataAccess()
activate IAnalyticDataAccess (Data Access Layer)

IAnalyticDataAccess (Data Access Layer) ->IAnalyticDataAccess (Data Access Layer): AnalyticDataAccess()

IAnalyticService (Service Layer) <-- IAnalyticDataAccess (Data Access Layer): return AnalyticDataAccess

IAnalyticService (Service Layer) -> IAnalyticDataAccess (Data Access Layer): analyticDataAccess.FetchContentAnalytic(IAnalyticModel analyticModel) : IAnalyticEntity

IAnalyticDataAccess (Data Access Layer) ->IAnalyticDataAccess (Data Access Layer): FetchAnalytic() : IAnalyticEntity

IAnalyticDataAccess (Data Access Layer) -> Analytic Table (MariaDB / Data Store):  SELECT <Relevant Data Column Names> FROM <Analytic Table Name>\n   WHERE <KPI Specific Condition>;
activate Analytic Table (MariaDB / Data Store)

note right of IAnalyticDataAccess (Data Access Layer): **NOTE**: There are 6 KPIs and it may be easier to use\nStored Procedures for each KPI


// Responding back to the Front End starts


IAnalyticDataAccess (Data Access Layer) <-- Analytic Table (MariaDB / Data Store): return raw data
deactivate Analytic Table (MariaDB / Data Store)

IAnalyticDataAccess (Data Access Layer) ->IAnalyticDataAccess (Data Access Layer): RefineData() : IAnalyticEntity

IAnalyticService (Service Layer) <-- IAnalyticDataAccess (Data Access Layer): return IAnalyticEntity

deactivate IAnalyticDataAccess (Data Access Layer)

IAnalyticService (Service Layer) -> IResponseModel: IResponseModel response = new AnalyticResponseModel()
activate IResponseModel
IResponseModel -> IResponseModel: AnalyticResponseModel()
IAnalyticService (Service Layer) <-- IResponseModel: return AnalyticResponseModel
deactivate IResponseModel
note left of IResponseModel: **NOTE**: The Response model here will contain\nIAnalyticEntity and any supporting info for the Front End.


IAnalyticManager (Business Layer) <-- IAnalyticService (Service Layer): return IResponseModel
deactivate IAnalyticService (Service Layer)

IAnalyticManager (Business Layer) -> IAnalyticManager (Business Layer): IsResponseValid(IResponseModel response) : Boolean

FetchKPIAPI (Web Services) <-- IAnalyticManager (Business Layer): return IResponseModel
deactivate IAnalyticManager (Business Layer)

Front End <-- FetchKPIAPI (Web Services): return IResponseModel
deactivate FetchKPIAPI (Web Services)


Client <-- Front End: Display Bar Chart and Trend Chart
deactivate Front End
deactivate Client
